// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package dev.flutter.plugins.nfcmanager

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object PigeonPigeonUtils {

  fun createConnectionError(channelName: String): FlutterError {
    return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")  }

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class ReaderFlagPigeon(val raw: Int) {
  NFC_A(0),
  NFC_B(1),
  NFC_BARCODE(2),
  NFC_F(3),
  NFC_V(4),
  NO_PLATFORM_SOUNDS(5),
  SKIP_NDEF_CHECK(6);

  companion object {
    fun ofRaw(raw: Int): ReaderFlagPigeon? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class AdapterStatePigeon(val raw: Int) {
  OFF(0),
  TURNING_ON(1),
  ON(2),
  TURNING_OFF(3);

  companion object {
    fun ofRaw(raw: Int): AdapterStatePigeon? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class TypeNameFormatPigeon(val raw: Int) {
  EMPTY(0),
  WELL_KNOWN(1),
  MEDIA(2),
  ABSOLUTE_URI(3),
  EXTERNAL(4),
  UNKNOWN(5),
  UNCHANGED(6);

  companion object {
    fun ofRaw(raw: Int): TypeNameFormatPigeon? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class NfcBarcodeTypePigeon(val raw: Int) {
  KOVIO(0),
  UNKNOWN(1);

  companion object {
    fun ofRaw(raw: Int): NfcBarcodeTypePigeon? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class MifareClassicTypePigeon(val raw: Int) {
  CLASSIC(0),
  PLUS(1),
  PRO(2),
  UNKNOWN(3);

  companion object {
    fun ofRaw(raw: Int): MifareClassicTypePigeon? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class MifareUltralightTypePigeon(val raw: Int) {
  ULTRALIGHT(0),
  ULTRALIGHT_C(1),
  UNKNOWN(2);

  companion object {
    fun ofRaw(raw: Int): MifareUltralightTypePigeon? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class TagPigeon (
  val handle: String,
  val id: ByteArray,
  val techList: List<String>,
  val ndef: NdefPigeon? = null,
  val nfcA: NfcAPigeon? = null,
  val nfcB: NfcBPigeon? = null,
  val nfcF: NfcFPigeon? = null,
  val nfcV: NfcVPigeon? = null,
  val isoDep: IsoDepPigeon? = null,
  val mifareClassic: MifareClassicPigeon? = null,
  val mifareUltralight: MifareUltralightPigeon? = null,
  val ndefFormatable: String? = null,
  val nfcBarcode: NfcBarcodePigeon? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): TagPigeon {
      val handle = pigeonVar_list[0] as String
      val id = pigeonVar_list[1] as ByteArray
      val techList = pigeonVar_list[2] as List<String>
      val ndef = pigeonVar_list[3] as NdefPigeon?
      val nfcA = pigeonVar_list[4] as NfcAPigeon?
      val nfcB = pigeonVar_list[5] as NfcBPigeon?
      val nfcF = pigeonVar_list[6] as NfcFPigeon?
      val nfcV = pigeonVar_list[7] as NfcVPigeon?
      val isoDep = pigeonVar_list[8] as IsoDepPigeon?
      val mifareClassic = pigeonVar_list[9] as MifareClassicPigeon?
      val mifareUltralight = pigeonVar_list[10] as MifareUltralightPigeon?
      val ndefFormatable = pigeonVar_list[11] as String?
      val nfcBarcode = pigeonVar_list[12] as NfcBarcodePigeon?
      return TagPigeon(handle, id, techList, ndef, nfcA, nfcB, nfcF, nfcV, isoDep, mifareClassic, mifareUltralight, ndefFormatable, nfcBarcode)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      handle,
      id,
      techList,
      ndef,
      nfcA,
      nfcB,
      nfcF,
      nfcV,
      isoDep,
      mifareClassic,
      mifareUltralight,
      ndefFormatable,
      nfcBarcode,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is TagPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NdefPigeon (
  val type: String,
  val canMakeReadOnly: Boolean,
  val isWritable: Boolean,
  val maxSize: Long,
  val cachedNdefMessage: NdefMessagePigeon? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NdefPigeon {
      val type = pigeonVar_list[0] as String
      val canMakeReadOnly = pigeonVar_list[1] as Boolean
      val isWritable = pigeonVar_list[2] as Boolean
      val maxSize = pigeonVar_list[3] as Long
      val cachedNdefMessage = pigeonVar_list[4] as NdefMessagePigeon?
      return NdefPigeon(type, canMakeReadOnly, isWritable, maxSize, cachedNdefMessage)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      type,
      canMakeReadOnly,
      isWritable,
      maxSize,
      cachedNdefMessage,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is NdefPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NfcAPigeon (
  val atqa: ByteArray,
  val sak: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NfcAPigeon {
      val atqa = pigeonVar_list[0] as ByteArray
      val sak = pigeonVar_list[1] as Long
      return NfcAPigeon(atqa, sak)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      atqa,
      sak,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is NfcAPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NfcBPigeon (
  val applicationData: ByteArray,
  val protocolInfo: ByteArray
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NfcBPigeon {
      val applicationData = pigeonVar_list[0] as ByteArray
      val protocolInfo = pigeonVar_list[1] as ByteArray
      return NfcBPigeon(applicationData, protocolInfo)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      applicationData,
      protocolInfo,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is NfcBPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NfcFPigeon (
  val manufacturer: ByteArray,
  val systemCode: ByteArray
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NfcFPigeon {
      val manufacturer = pigeonVar_list[0] as ByteArray
      val systemCode = pigeonVar_list[1] as ByteArray
      return NfcFPigeon(manufacturer, systemCode)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      manufacturer,
      systemCode,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is NfcFPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NfcVPigeon (
  val dsfId: Long,
  val responseFlags: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NfcVPigeon {
      val dsfId = pigeonVar_list[0] as Long
      val responseFlags = pigeonVar_list[1] as Long
      return NfcVPigeon(dsfId, responseFlags)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      dsfId,
      responseFlags,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is NfcVPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class IsoDepPigeon (
  val hiLayerResponse: ByteArray? = null,
  val historicalBytes: ByteArray? = null,
  val isExtendedLengthApduSupported: Boolean
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): IsoDepPigeon {
      val hiLayerResponse = pigeonVar_list[0] as ByteArray?
      val historicalBytes = pigeonVar_list[1] as ByteArray?
      val isExtendedLengthApduSupported = pigeonVar_list[2] as Boolean
      return IsoDepPigeon(hiLayerResponse, historicalBytes, isExtendedLengthApduSupported)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      hiLayerResponse,
      historicalBytes,
      isExtendedLengthApduSupported,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is IsoDepPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MifareClassicPigeon (
  val type: MifareClassicTypePigeon,
  val blockCount: Long,
  val sectorCount: Long,
  val size: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MifareClassicPigeon {
      val type = pigeonVar_list[0] as MifareClassicTypePigeon
      val blockCount = pigeonVar_list[1] as Long
      val sectorCount = pigeonVar_list[2] as Long
      val size = pigeonVar_list[3] as Long
      return MifareClassicPigeon(type, blockCount, sectorCount, size)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      type,
      blockCount,
      sectorCount,
      size,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is MifareClassicPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MifareUltralightPigeon (
  val type: MifareUltralightTypePigeon
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): MifareUltralightPigeon {
      val type = pigeonVar_list[0] as MifareUltralightTypePigeon
      return MifareUltralightPigeon(type)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      type,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is MifareUltralightPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NfcBarcodePigeon (
  val type: NfcBarcodeTypePigeon,
  val barcode: ByteArray
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NfcBarcodePigeon {
      val type = pigeonVar_list[0] as NfcBarcodeTypePigeon
      val barcode = pigeonVar_list[1] as ByteArray
      return NfcBarcodePigeon(type, barcode)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      type,
      barcode,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is NfcBarcodePigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NdefMessagePigeon (
  val records: List<NdefRecordPigeon>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NdefMessagePigeon {
      val records = pigeonVar_list[0] as List<NdefRecordPigeon>
      return NdefMessagePigeon(records)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      records,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is NdefMessagePigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NdefRecordPigeon (
  val tnf: TypeNameFormatPigeon,
  val type: ByteArray,
  val id: ByteArray,
  val payload: ByteArray
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NdefRecordPigeon {
      val tnf = pigeonVar_list[0] as TypeNameFormatPigeon
      val type = pigeonVar_list[1] as ByteArray
      val id = pigeonVar_list[2] as ByteArray
      val payload = pigeonVar_list[3] as ByteArray
      return NdefRecordPigeon(tnf, type, id, payload)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      tnf,
      type,
      id,
      payload,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is NdefRecordPigeon) {
      return false
    }
    if (this === other) {
      return true
    }
    return PigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class PigeonPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ReaderFlagPigeon.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          AdapterStatePigeon.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          TypeNameFormatPigeon.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          NfcBarcodeTypePigeon.ofRaw(it.toInt())
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          MifareClassicTypePigeon.ofRaw(it.toInt())
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          MifareUltralightTypePigeon.ofRaw(it.toInt())
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          TagPigeon.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NdefPigeon.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NfcAPigeon.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NfcBPigeon.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NfcFPigeon.fromList(it)
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NfcVPigeon.fromList(it)
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          IsoDepPigeon.fromList(it)
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MifareClassicPigeon.fromList(it)
        }
      }
      143.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MifareUltralightPigeon.fromList(it)
        }
      }
      144.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NfcBarcodePigeon.fromList(it)
        }
      }
      145.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NdefMessagePigeon.fromList(it)
        }
      }
      146.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NdefRecordPigeon.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is ReaderFlagPigeon -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is AdapterStatePigeon -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is TypeNameFormatPigeon -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is NfcBarcodeTypePigeon -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      is MifareClassicTypePigeon -> {
        stream.write(133)
        writeValue(stream, value.raw)
      }
      is MifareUltralightTypePigeon -> {
        stream.write(134)
        writeValue(stream, value.raw)
      }
      is TagPigeon -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is NdefPigeon -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is NfcAPigeon -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is NfcBPigeon -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is NfcFPigeon -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      is NfcVPigeon -> {
        stream.write(140)
        writeValue(stream, value.toList())
      }
      is IsoDepPigeon -> {
        stream.write(141)
        writeValue(stream, value.toList())
      }
      is MifareClassicPigeon -> {
        stream.write(142)
        writeValue(stream, value.toList())
      }
      is MifareUltralightPigeon -> {
        stream.write(143)
        writeValue(stream, value.toList())
      }
      is NfcBarcodePigeon -> {
        stream.write(144)
        writeValue(stream, value.toList())
      }
      is NdefMessagePigeon -> {
        stream.write(145)
        writeValue(stream, value.toList())
      }
      is NdefRecordPigeon -> {
        stream.write(146)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class FlutterApiPigeon(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by FlutterApiPigeon. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonPigeonCodec()
    }
  }
  fun onTagDiscovered(tagArg: TagPigeon, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.onTagDiscovered$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(tagArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(PigeonPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onAdapterStateChanged(stateArg: AdapterStatePigeon, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.nfc_manager.FlutterApiPigeon.onAdapterStateChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(stateArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(PigeonPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface HostApiPigeon {
  fun nfcAdapterIsEnabled(): Boolean
  fun nfcAdapterIsSecureNfcEnabled(): Boolean
  fun nfcAdapterIsSecureNfcSupported(): Boolean
  fun nfcAdapterEnableReaderMode(flags: List<ReaderFlagPigeon>)
  fun nfcAdapterDisableReaderMode()
  fun ndefGetNdefMessage(handle: String): NdefMessagePigeon?
  fun ndefWriteNdefMessage(handle: String, message: NdefMessagePigeon)
  fun ndefMakeReadOnly(handle: String): Boolean
  fun nfcAGetMaxTransceiveLength(handle: String): Long
  fun nfcAGetTimeout(handle: String): Long
  fun nfcASetTimeout(handle: String, timeout: Long)
  fun nfcATransceive(handle: String, bytes: ByteArray): ByteArray
  fun nfcBGetMaxTransceiveLength(handle: String): Long
  fun nfcBTransceive(handle: String, bytes: ByteArray): ByteArray
  fun nfcFGetMaxTransceiveLength(handle: String): Long
  fun nfcFGetTimeout(handle: String): Long
  fun nfcFSetTimeout(handle: String, timeout: Long)
  fun nfcFTransceive(handle: String, bytes: ByteArray): ByteArray
  fun nfcVGetMaxTransceiveLength(handle: String): Long
  fun nfcVTransceive(handle: String, bytes: ByteArray): ByteArray
  fun isoDepGetMaxTransceiveLength(handle: String): Long
  fun isoDepGetTimeout(handle: String): Long
  fun isoDepSetTimeout(handle: String, timeout: Long)
  fun isoDepTransceive(handle: String, bytes: ByteArray): ByteArray
  fun mifareClassicGetMaxTransceiveLength(handle: String): Long
  fun mifareClassicGetTimeout(handle: String): Long
  fun mifareClassicSetTimeout(handle: String, timeout: Long)
  fun mifareClassicBlockToSector(handle: String, blockIndex: Long): Long
  fun mifareClassicGetBlockCountInSector(handle: String, sectorIndex: Long): Long
  fun mifareClassicSectorToBlock(handle: String, sectorIndex: Long): Long
  fun mifareClassicAuthenticateSectorWithKeyA(handle: String, sectorIndex: Long, key: ByteArray): Boolean
  fun mifareClassicAuthenticateSectorWithKeyB(handle: String, sectorIndex: Long, key: ByteArray): Boolean
  fun mifareClassicIncrement(handle: String, blockIndex: Long, value: Long)
  fun mifareClassicDecrement(handle: String, blockIndex: Long, value: Long)
  fun mifareClassicReadBlock(handle: String, blockIndex: Long): ByteArray
  fun mifareClassicWriteBlock(handle: String, blockIndex: Long, data: ByteArray)
  fun mifareClassicRestore(handle: String, blockIndex: Long)
  fun mifareClassicTransfer(handle: String, blockIndex: Long)
  fun mifareClassicTransceive(handle: String, bytes: ByteArray): ByteArray
  fun mifareUltralightGetMaxTransceiveLength(handle: String): Long
  fun mifareUltralightGetTimeout(handle: String): Long
  fun mifareUltralightSetTimeout(handle: String, timeout: Long)
  fun mifareUltralightReadPages(handle: String, pageOffset: Long): ByteArray
  fun mifareUltralightWritePage(handle: String, pageOffset: Long, data: ByteArray)
  fun mifareUltralightTransceive(handle: String, bytes: ByteArray): ByteArray
  fun ndefFormatableFormat(handle: String, firstMessage: NdefMessagePigeon)
  fun ndefFormatableFormatReadOnly(handle: String, firstMessage: NdefMessagePigeon)

  companion object {
    /** The codec used by HostApiPigeon. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonPigeonCodec()
    }
    /** Sets up an instance of `HostApiPigeon` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: HostApiPigeon?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.nfcAdapterIsEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.nfcAdapterIsEnabled())
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.nfcAdapterIsSecureNfcEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.nfcAdapterIsSecureNfcEnabled())
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.nfcAdapterIsSecureNfcSupported$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.nfcAdapterIsSecureNfcSupported())
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.nfcAdapterEnableReaderMode$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val flagsArg = args[0] as List<ReaderFlagPigeon>
            val wrapped: List<Any?> = try {
              api.nfcAdapterEnableReaderMode(flagsArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.nfcAdapterDisableReaderMode$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.nfcAdapterDisableReaderMode()
              listOf(null)
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.ndefGetNdefMessage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.ndefGetNdefMessage(handleArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.ndefWriteNdefMessage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val messageArg = args[1] as NdefMessagePigeon
            val wrapped: List<Any?> = try {
              api.ndefWriteNdefMessage(handleArg, messageArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.ndefMakeReadOnly$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.ndefMakeReadOnly(handleArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.nfcAGetMaxTransceiveLength$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.nfcAGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.nfcAGetTimeout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.nfcAGetTimeout(handleArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.nfcASetTimeout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val timeoutArg = args[1] as Long
            val wrapped: List<Any?> = try {
              api.nfcASetTimeout(handleArg, timeoutArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.nfcATransceive$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            val wrapped: List<Any?> = try {
              listOf(api.nfcATransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.nfcBGetMaxTransceiveLength$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.nfcBGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.nfcBTransceive$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            val wrapped: List<Any?> = try {
              listOf(api.nfcBTransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.nfcFGetMaxTransceiveLength$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.nfcFGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.nfcFGetTimeout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.nfcFGetTimeout(handleArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.nfcFSetTimeout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val timeoutArg = args[1] as Long
            val wrapped: List<Any?> = try {
              api.nfcFSetTimeout(handleArg, timeoutArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.nfcFTransceive$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            val wrapped: List<Any?> = try {
              listOf(api.nfcFTransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.nfcVGetMaxTransceiveLength$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.nfcVGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.nfcVTransceive$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            val wrapped: List<Any?> = try {
              listOf(api.nfcVTransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.isoDepGetMaxTransceiveLength$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.isoDepGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.isoDepGetTimeout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.isoDepGetTimeout(handleArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.isoDepSetTimeout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val timeoutArg = args[1] as Long
            val wrapped: List<Any?> = try {
              api.isoDepSetTimeout(handleArg, timeoutArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.isoDepTransceive$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            val wrapped: List<Any?> = try {
              listOf(api.isoDepTransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareClassicGetMaxTransceiveLength$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.mifareClassicGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareClassicGetTimeout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.mifareClassicGetTimeout(handleArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareClassicSetTimeout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val timeoutArg = args[1] as Long
            val wrapped: List<Any?> = try {
              api.mifareClassicSetTimeout(handleArg, timeoutArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareClassicBlockToSector$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1] as Long
            val wrapped: List<Any?> = try {
              listOf(api.mifareClassicBlockToSector(handleArg, blockIndexArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareClassicGetBlockCountInSector$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val sectorIndexArg = args[1] as Long
            val wrapped: List<Any?> = try {
              listOf(api.mifareClassicGetBlockCountInSector(handleArg, sectorIndexArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareClassicSectorToBlock$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val sectorIndexArg = args[1] as Long
            val wrapped: List<Any?> = try {
              listOf(api.mifareClassicSectorToBlock(handleArg, sectorIndexArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareClassicAuthenticateSectorWithKeyA$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val sectorIndexArg = args[1] as Long
            val keyArg = args[2] as ByteArray
            val wrapped: List<Any?> = try {
              listOf(api.mifareClassicAuthenticateSectorWithKeyA(handleArg, sectorIndexArg, keyArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareClassicAuthenticateSectorWithKeyB$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val sectorIndexArg = args[1] as Long
            val keyArg = args[2] as ByteArray
            val wrapped: List<Any?> = try {
              listOf(api.mifareClassicAuthenticateSectorWithKeyB(handleArg, sectorIndexArg, keyArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareClassicIncrement$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1] as Long
            val valueArg = args[2] as Long
            val wrapped: List<Any?> = try {
              api.mifareClassicIncrement(handleArg, blockIndexArg, valueArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareClassicDecrement$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1] as Long
            val valueArg = args[2] as Long
            val wrapped: List<Any?> = try {
              api.mifareClassicDecrement(handleArg, blockIndexArg, valueArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareClassicReadBlock$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1] as Long
            val wrapped: List<Any?> = try {
              listOf(api.mifareClassicReadBlock(handleArg, blockIndexArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareClassicWriteBlock$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1] as Long
            val dataArg = args[2] as ByteArray
            val wrapped: List<Any?> = try {
              api.mifareClassicWriteBlock(handleArg, blockIndexArg, dataArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareClassicRestore$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1] as Long
            val wrapped: List<Any?> = try {
              api.mifareClassicRestore(handleArg, blockIndexArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareClassicTransfer$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1] as Long
            val wrapped: List<Any?> = try {
              api.mifareClassicTransfer(handleArg, blockIndexArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareClassicTransceive$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            val wrapped: List<Any?> = try {
              listOf(api.mifareClassicTransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareUltralightGetMaxTransceiveLength$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.mifareUltralightGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareUltralightGetTimeout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf(api.mifareUltralightGetTimeout(handleArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareUltralightSetTimeout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val timeoutArg = args[1] as Long
            val wrapped: List<Any?> = try {
              api.mifareUltralightSetTimeout(handleArg, timeoutArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareUltralightReadPages$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val pageOffsetArg = args[1] as Long
            val wrapped: List<Any?> = try {
              listOf(api.mifareUltralightReadPages(handleArg, pageOffsetArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareUltralightWritePage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val pageOffsetArg = args[1] as Long
            val dataArg = args[2] as ByteArray
            val wrapped: List<Any?> = try {
              api.mifareUltralightWritePage(handleArg, pageOffsetArg, dataArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.mifareUltralightTransceive$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            val wrapped: List<Any?> = try {
              listOf(api.mifareUltralightTransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.ndefFormatableFormat$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val firstMessageArg = args[1] as NdefMessagePigeon
            val wrapped: List<Any?> = try {
              api.ndefFormatableFormat(handleArg, firstMessageArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.HostApiPigeon.ndefFormatableFormatReadOnly$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val firstMessageArg = args[1] as NdefMessagePigeon
            val wrapped: List<Any?> = try {
              api.ndefFormatableFormatReadOnly(handleArg, firstMessageArg)
              listOf(null)
            } catch (exception: Throwable) {
              PigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
